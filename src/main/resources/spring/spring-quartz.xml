<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd"
	default-lazy-init="true">
	<!-- <bean id="textSentimentSchedule" class="com.opinion.monitoring.schedule.TextSentimentSchedule" /> -->
	<bean id="singleThreadQuartzScheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<!-- Triggers集成 -->
		<property name="triggers">
			<list>
				<ref bean="cronTriggerAdjustOptimizationCount" />
			</list>
		</property>
		<!-- Quartz配置, 本地运行无需单独的quartz.properties文件，在此简单配置即可 -->
		<property name="quartzProperties">
			<props>
				<prop key="org.quartz.threadPool.threadCount">1</prop>
			</props>
		</property>
		<!-- 启动时延期2秒开始任务 -->
		<property name="startupDelay" value="2" />
	</bean>

	<bean id="cronTriggerControlCustomerKeywordStatus" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="cronJobDetailControlCustomerKeywordStatus" />
		<property name="cronExpression" value="0 30 0 * * ?" />
	</bean>

	<!-- JobDetajil, 基于MethodInvokingJobDetailFactoryBean调用普通Spring Bean -->
	<bean id="cronJobDetailControlCustomerKeywordStatus" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="controlCustomerKeywordStatusSchedule" />
		<property name="targetMethod" value="runTask" />
		<!-- 同一任务在前一次执行未完成而Trigger时间又到时是否并发开始新的执行, 默认为true. -->
		<property name="concurrent" value="false" />
	</bean>

	<bean id="cronTriggerAdjustOptimizationCount" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="cronJobDetailAdjustOptimizationCount" />
		<property name="cronExpression" value="0 10 0 * * ?" />
	</bean>

	<!-- JobDetajil, 基于MethodInvokingJobDetailFactoryBean调用普通Spring Bean -->
	<bean id="cronJobDetailAdjustOptimizationCount" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="adjustOptimizationCountSchedule" />
		<property name="targetMethod" value="runTask" />
		<!-- 同一任务在前一次执行未完成而Trigger时间又到时是否并发开始新的执行, 默认为true. -->
		<property name="concurrent" value="false" />
	</bean>

	<bean id="cronTriggerSwitchClientStatusGroup" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="cronJobDetailSwitchClientStatusGroup" />
		<property name="cronExpression" value="0 0 01 * * ?" />
	</bean>

	<!-- JobDetajil, 基于MethodInvokingJobDetailFactoryBean调用普通Spring Bean -->
	<bean id="cronJobDetailSwitchClientStatusGroup" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="switchClientStatusGroupSchedule" />
		<property name="targetMethod" value="runTask" />
		<!-- 同一任务在前一次执行未完成而Trigger时间又到时是否并发开始新的执行, 默认为true. -->
		<property name="concurrent" value="false" />
	</bean>

	<bean id="cronTriggerRenewalNotification" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="cronJobDetailRenewalNotification" />
		<property name="cronExpression" value="0 0 16 * * ?" />
	</bean>

	<!-- JobDetajil, 基于MethodInvokingJobDetailFactoryBean调用普通Spring Bean -->
	<bean id="cronJobDetailRenewalNotification" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="renewalNotificationSchedule" />
		<property name="targetMethod" value="runTask" />
		<!-- 同一任务在前一次执行未完成而Trigger时间又到时是否并发开始新的执行, 默认为true. -->
		<property name="concurrent" value="false" />
	</bean>

	<bean id="cronTriggerGenerateDailyReport" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="cronJobDetailGenerateDailyReport" />
		<property name="cronExpression" value="1/30 * * * * ?" />
	</bean>

	<bean id="cronJobDetailGenerateDailyReport" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="generateDailyReportSchedule" />
		<property name="targetMethod" value="runTask" />
		<property name="concurrent" value="false" />
	</bean>

	<!--发送投诉邮件-->
	<bean id="cronTriggerComplaintsReportSchedule" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="cronJobDetailcomplaintsReportSchedule" />
		<property name="cronExpression" value="0 0 10 * * ?" />
		<!--<property name="cronExpression" value=" 0 */1 * * * ?" />-->
	</bean>

	<bean id="cronJobDetailcomplaintsReportSchedule" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="complaintsReportSchedule" />
		<property name="targetMethod" value="runTask" />
		<property name="concurrent" value="false" />
	</bean>

</beans>