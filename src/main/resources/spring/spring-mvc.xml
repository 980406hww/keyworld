<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd">

	<mvc:annotation-driven>
		<mvc:message-converters register-defaults="true">
			<!-- 将StringHttpMessageConverter的默认编码设为UTF-8 -->
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
				<constructor-arg value="UTF-8" />
			</bean>
			<!-- 将Jackson2HttpMessageConverter的默认格式化输出设为true -->
			<bean
				class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
				<property name="prettyPrint" value="true" />
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>

	<!-- aspectj aop启用CGliB代理 -->
	<aop:aspectj-autoproxy expose-proxy="true" proxy-target-class="true"/>
	<context:component-scan base-package="com.keymanager.monitoring.controller;com.keymanager.monitoring.common.scan"/>

	<mvc:default-servlet-handler />
	<!-- 配置哪些是静态资源，缺省Servlet 直接返回 -->
	<mvc:resources mapping="/static/**" location="/static/" cache-period="31556926"/>
	<mvc:resources mapping="/upload/**" location="/upload/" cache-period="31556926"/>
	<mvc:resources mapping="/favicon.ico" location="/static/style/images/favicon.ico" cache-period="31556926"/>
	<mvc:resources mapping="/resources/**" location="/resources/"/>    
	<mvc:resources mapping="/maintains/**" location="/maintains/"/>

	<!-- hibernate-Validator -->
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		<property name="providerClass" value="org.hibernate.validator.HibernateValidator"/>
	</bean>
	<bean class="org.springframework.validation.beanvalidation.MethodValidationPostProcessor"/>

	<!-- csrf CookieCsrfTokenRepository -->
	<bean class="com.keymanager.monitoring.common.csrf.CookieCsrfTokenRepository" />
	
	<mvc:interceptors>  
	    <mvc:interceptor>  
	        <mvc:mapping path="/internal/**"/>
			<bean class="com.keymanager.monitoring.controller.SpringMVCInterceptor"/>
	    </mvc:interceptor>
	   <!-- <mvc:interceptor>
	        <mvc:mapping path="/internal/**"/>
			<bean class="com.keymanager.monitoring.controller.LoginInterceptor"/>
	    </mvc:interceptor>-->
		<!--<mvc:interceptor>
			<mvc:mapping path="/login" />
			<bean class="com.keymanager.monitoring.common.csrf.CsrfInterceptor" />
		</mvc:interceptor>-->
	</mvc:interceptors>

	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="10485760" />
	</bean>

	<bean id="springMVCExceptionResolver" class="com.keymanager.monitoring.controller.SpringMVCExceptionResolver" />

	<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/"/>
		<property name="suffix" value=".jsp"/>
	</bean>

	<!-- 启用shrio 控制器授权注解拦截方式 -->
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager"/>
	</bean>
	<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
	<!-- AOP式方法级权限检查  -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
		  depends-on="lifecycleBeanPostProcessor">
		<property name="proxyTargetClass" value="true"/>
	</bean>

	<!-- AOP式方法级权限检查  -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
		  depends-on="lifecycleBeanPostProcessor">
		<property name="proxyTargetClass" value="true"/>
	</bean>

</beans>